# CRYPTOGRAPHIC FAILURES
------------------------

* Introduction
--------------
Cryptographic Failures are a broad, wide-ranging class of vulnerabilities that relate to any instance where cryptography is used poorly, incorrectly, or not at all. While we don’t need to 
encrypt everything, it’s important that a user’s private sessions and data are protected in such a way that unauthorized users cannot access them.

Generally, this entails leveraging secure channels to transmit data (i.e., HTTPS instead of HTTP) and hashing/encrypting sensitive information at rest, all while leveraging best practices 
related to cryptography.

In many cases, this means we should use cryptographically secure functions (avoid deprecated or weak ciphers), ensure we are using secure keys when encrypting data (avoid using default or 
easily guessable credentials), ensure we are taking steps to protect hashed data (i.e., adding Salt to hashed data), and properly classifying data for the appropriate level of security 
(i.e., protecting sensitive information such as passwords).

In the following example, we’ll see what can happen if developers fail to implement proper cryptography by reviewing several code snippets and a sample database.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Identifying Cryptographic Failures
------------------------------------
In the following example, we’ll review several code snippets, as well as a test database export, to determine if an application has any Cryptographic Failures that need to be addressed. 
While this is only a test database export, the data within the database export matches the format and type of data which would be present.

* Instructions
--------------
To view the database export, we can run the following command.

	cat export.sql

We can see two tables (users and card_number) and two entries within each table.

The first table is the users table. This table has four fields (UID, Username, Password_MDHash, and LastVisit ) and appears to hold information related to registered users.

Let’s look at the two INSERT statements to see how this data is formatted.

Reviewing the Password_MDHash, we can see two hashes (5f4dcc3b5aa765d61d8327deb882cf99 and 06bf3b78441d8642bb0607c993dc4a12) which have been added to the database. While we can’t see 
exactly which hash algorithm is being used here, we can review the PHP code which is used to insert new users into the database.

The PHP code which is used to insert new users into the database is as follows:

$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "customer_db";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);
// Check connection
if ($conn->connect_error) {
  die("Connection failed: " . $conn->connect_error);
}
$username = $_POST['username'];
$password_hash = md5($_POST['password']);
$sql = "INSERT INTO MyGuests (Username, Password_MDHash)
VALUES ($username,$password)";

if ($conn->query($sql) === TRUE) {
  echo "New usercreated successfully";
} else {
  echo "Error: " . $sql . "<br>" . $conn->error;
}

$conn->close();

Reviewing this code, it is apparent that the application is using MD5 to hash the string. A quick review of MD5 has found that it is generally discouraged, as weak passwords can be 
cracked. Additionally, the application failed to use any salting within this hash!

These two factors combined create a serious potential risk for users. By using a weak hashing function and failing to add any unique salts to the hash, the application certainly suffers 
from a Cryptographic Failure.

Another important consideration when looking at Cryptographic Failures is considering where cryptography should be used.

Let’s look at the next table, the card_number table.

Looking at this table and the two related INSERT statements for card_number, we can see that the application stores credit card numbers in plain text! This is also a significant 
cryptographic failure and is against PCI compliance regulations.

It’s important to remember. When we discuss Cryptographic Failures, we also need to consider what is being encrypted/secured and not just how.

In the following exercise, we’ll look at how we can revise this code to reduce the risk of Cryptographic Failures.

bash
----
$ cat export.sql
-- phpMyAdmin SQL Dump
-- version 5.2.1
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generated time:
-- Server version: 8.0.32
-- PHP version: 8.1.12

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;


CREATE TABLE IF NOT EXISTS `user` (
  `UID` int NOT NULL AUTO_INCREMENT,
  `Username` text,
  `Password_MDHash` text,
  `LastVisit` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------


CREATE TABLE IF NOT EXISTS `card_number` (
  `UID` int NOT NULL AUTO_INCREMENT,
  `Card_number` text,
  `User_UID` text
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------


INSERT INTO `users` (`UID`, `Username`, `Password_MDHash`, `LastVisit`) VALUES
('1',user1', '5f4dcc3b5aa765d61d8327deb882cf99');

INSERT INTO `users` (`UID`, `Username`, `Password_MDHash`, `LastVisit`) VALUES
('2', user2', '06bf3b78441d8642bb0607c993dc4a12');

INSERT INTO `card_number` (`UID`, `Card_number`, `User_UID`) VALUES
('1', 4012888888881881', '1');

INSERT INTO `card_number` (`UID`, `Card_number`, `User_UID`) VALUES
('2', '378282246310005', '2');

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Remediating Cryptographic Failures
------------------------------------
From our review, we’ve identified two potential cryptographic issues.

The first is the use of a potentially insecure cryptographic algorithm, and the second is a lack of cryptographic controls around critical data. Let’s address the first issue, how 
password hashes are being generated and stored.

Earlier, we determined two main issues surrounding how user’s passwords were stored. Firstly, the application failed to use a “secure” algorithm. Secondly, the application failed to 
implement any salting to the application.

When we look at these two problems, there are several solutions. One solution, in particular, is using a better hashing algorithm. By using a “secure” hashing algorithm, such as those 
mentioned by OWASP we can significantly slow attacks targeted around brute-forcing any stolen hashes. But even if we use a secure hash without salts, some hashes may be trivial to crack 
due to attacks like dictionary attacks or using rainbow tables. To reduce the risk associated with these types of attacks, we can use salts to add additional randomness to hashes. While 
there are many ways we can add salts, its best to avoid manually coding any cryptographic functionality. Cryptography is incredibly complex and easy to get wrong. To ensure we don’t 
accidentally create a less secure hashing method, it’s best to use built-in functions. While they will vary from language to language, PHP supports several built-in functions to securely 
aid in the securely hashing and salting of sensitive data. Details are available here.

Let’s compare the password_hash() function to the md5() for this exercise.

* Instructions
--------------
The code below is designed to apply the MD5 hashing algorithm to the variable.

<?php
$password = "Password123";

$hash = md5($password);

print_r($hash);

If we execute the code by navigating to the bash and inserting php code.php, we can see the output hash of 42f749ade7f9e195bf475f37a44cafcb. Taking the output hash and providing it to any 
online or offline brute-forcer will lead to a near-instant crack.

However, replacing the MD5($password) method with the password_hash($password, null) function call leads to a considerably more secure hash.

	Try it:
	$hash = password_hash($password, null);

Not only does this function now use a more secure hashing algorithm (BCRYPT), but it also automatically securely implements salting! This salting is further observable if you run the code 
several times. Despite using the same password, the resulting hash is different every time!

By storing these hashes and using the password_verify() function to validate the hashes, we can easily implement a more secure registration and login functionality.

	Try it:
	password_verify($password,$hash);
	(Return 1 if true, nothing if false)

Now that we’ve fully covered how to store our password hashes, let’s briefly discuss how to handle credit card information. Depending on the business needs, storing credit card information
 may not be the best path forward.

Organizations must comply with various standards, including the payment card industry (PCI), when keeping credit card information. If, for whatever reason, an institution decides to store 
this data, developers should ensure that the data is properly encrypted and protected. Failure to comply with such standards could have serious legal ramifications, not just the security 
impact. For example, failure to comply with PCI can lead to fines of up to $500,000.

Given how detailed and complex standards such as PCI are, we won’t have time to cover them in this lesson. To learn more about these standards, refer to their official site.

code.php
--------
<?php
$password = "Password123";
 
$hash = md5($password);
 
print_r($hash);

Solution
--------
?php
$password = "Password123";
 
$hash = password_hash($password, null);

$validation = password_verify($password, $hash);
 
print_r($hash);
print_r("\n");
print_r("\n");
print_r($validation);
print_r("\n");

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Conclusion
------------
In the previous exercises, we saw several aspects of cryptographic failures, as well as some of the standards and expectations set out by the security community and governing bodies.

Leveraging hashing algorithms is a great step towards a more secure system, the individual functions chosen have an important impact on the security of a system. Failure to use 
cryptographically secure algorithms only works to delay a successful attack. By using a secure algorithm with salts, attackers are less likely to be successful in a useful amount of time.

Not only that but by using built-in functionality, we can ensure we don’t unintentionally expose our data to unintended risk.

Finally, we saw how important it is to identify sensitive data properly. If we fail to encrypt crucial data, it can not only impact an organization from a security perspective but also 
have potential legal ramifications, especially in cases where governing standards are in place.

